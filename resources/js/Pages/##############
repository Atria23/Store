import { usePage, Link, router } from "@inertiajs/react";
import { useState, useEffect } from "react";

export default function TypePage() {
    const { category, brand, brands = [], type, types: typeList = [], isPulsaOrData, products = [] } = usePage().props;
    const [phone, setPhone] = useState("");
    const [typingTimeout, setTypingTimeout] = useState(null);
    const [detectedBrand, setDetectedBrand] = useState("");
    const [selectedProduct, setSelectedProduct] = useState(null);
    const [customerNo, setCustomerNo] = useState("");
    const [loading, setLoading] = useState(false);
    const brandPrefixes = {
        "Telkomsel": ["0811", "0812", "0813", "0821", "0822", "0823", "0852", "0853"],
        "Indosat": ["0814", "0815", "0816", "0855", "0856", "0857", "0858"],
        "XL": ["0817", "0818", "0819", "0859", "0877", "0878"],
        "Tri": ["0895", "0896", "0897", "0898", "0899"],
        "Axis": ["0831", "0832", "0833", "0838"],
        "Smartfren": ["0881", "0882", "0883", "0884", "0885", "0886", "0887", "0888", "0889"],
        "By.U": ["0851"]
    };

    useEffect(() => {
        if (isPulsaOrData) {
            const params = new URLSearchParams(window.location.search);
            const phoneFromUrl = params.get("phone") || "";
            const cleanedPhone = normalizePhoneNumber(phoneFromUrl);
            setPhone(cleanedPhone);
            detectBrandByPrefix(cleanedPhone);
        }
    }, []);

    const handlePhoneChange = (e) => {
        const rawNumber = e.target.value;
        const cleanedNumber = normalizePhoneNumber(rawNumber);
        setPhone(cleanedNumber);

        if (typingTimeout) clearTimeout(typingTimeout);

        setTypingTimeout(setTimeout(() => {
            detectBrandByPrefix(cleanedNumber);
            updateUrl({ phone: cleanedNumber });
        }, 1000));
    };

    const normalizePhoneNumber = (number) => {
        if (!number) return "";
        let cleaned = number.replace(/[^0-9]/g, ""); // Hapus semua karakter kecuali angka

        if (cleaned.startsWith("62")) {
            cleaned = "0" + cleaned.substring(2); // Ubah "62" menjadi "0"
        } else if (cleaned.startsWith("+62")) {
            cleaned = "0" + cleaned.substring(3); // Ubah "+62" menjadi "0"
        }

        return cleaned;
    };

    const detectBrandByPrefix = (number) => {
        if (!number || number.length < 4) {
            setDetectedBrand(""); 
            return;
        }

        const prefix = number.substring(0, 4);
        let detected = null;

        Object.entries(brandPrefixes).forEach(([brandName, prefixes]) => {
            if (prefixes.includes(prefix)) {
                detected = brandName;
            }
        });

        if (!detected) {
            setDetectedBrand("Tidak Diketahui");
            return;
        }

        const matchedBrand = brands.find(b => b.name.toLowerCase().includes(detected.toLowerCase()));

        const finalBrand = matchedBrand ? matchedBrand.name : detected;
        setDetectedBrand(finalBrand);

        if (finalBrand !== brand?.name) {
            updateUrl({ phone: number, brand: finalBrand });
        }
    };

    const updateUrl = (updatedValues) => {
        const params = new URLSearchParams(window.location.search);
        Object.entries(updatedValues).forEach(([key, value]) => {
            if (value) {
                params.set(key, value);
            } else {
                params.delete(key);
            }
        });

        const newUrl = `/c=${category?.name}/b=${updatedValues.brand || brand?.name}` +
            (updatedValues.type || type?.name ? `/t=${updatedValues.type || type?.name}` : '') +
            `?${params.toString()}`;

        router.get(newUrl, {}, { replace: true });
    };

    const handleSubmit = (e) => {
        e.preventDefault();
        if (!selectedProduct || !customerNo) {
            alert('Mohon lengkapi nomor pelanggan dan pilih produk.');
            return;
        }

        setLoading(true);

        fetch('/transactions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
            },
            body: JSON.stringify({
                buyer_sku_code: selectedProduct.buyer_sku_code,
                customer_no: customerNo,
                max_price: selectedProduct.price,
                price_product: selectedProduct.price,
                testing: false,
            }),
        })
            .then((response) => response.json())
            .then((data) => {
                if (data.success) {
                    alert(`${data.message}`);
                } else {
                    alert(`Transaksi gagal: ${data.message}`);
                }
            })
            .catch(() => {
                alert('Terjadi kesalahan saat mengirim permintaan transaksi.');
            })
            .finally(() => {
                setLoading(false);
            });
    };

    return (
        <div className="container mx-auto p-4">
            <Link href="/" className="text-blue-600 font-bold">&larr; Kembali</Link>
            <h1 className="text-2xl font-bold my-4">{category?.name} - {brand?.name}</h1>

            {/* Input Nomor HP hanya jika kategori adalah Pulsa/Data/Masa Aktif */}
            {isPulsaOrData && (
                <div className="bg-gray-100 p-4 rounded-lg mb-4">
                    <label className="block font-semibold">Nomor HP:</label>
                    <input
                        type="tel"
                        className="w-full p-2 border rounded"
                        placeholder="Masukkan nomor HP"
                        value={phone}
                        onChange={handlePhoneChange}
                    />
                    {phone && (
                        <p className="text-gray-700 mt-2">
                            Operator: <strong>{detectedBrand}</strong>
                        </p>
                    )}
                </div>
            )}
            {!isPulsaOrData && (
                <div className="bg-gray-100 p-4 rounded-lg mb-4">
                    <label className="block font-semibold">Nomor Pelanggan:</label>
                    <input
                        type="text"
                        className="w-full p-2 border rounded"
                        placeholder="Masukkan nomor pelanggan"
                        value={customerNo}
                        onChange={(e) => setCustomerNo(e.target.value)}
                    />
                </div>
            )}

            {/* Tetap menampilkan daftar Type */}
            <h2 className="text-xl font-semibold mb-2">List Type</h2>
            <table className="w-full border-collapse border border-gray-300 mb-4">
                <thead>
                    <tr className="bg-gray-200">
                        <th className="border p-2">Nama Type</th>
                    </tr>
                </thead>
                <tbody>
                    {typeList.length > 0 ? (
                        typeList.map((typeItem) => (
                            <tr key={typeItem.id} className="border">
                                <td className="border p-2">
                                    <Link
                                        href={`/c=${category?.name}/b=${detectedBrand || brand?.name}/t=${typeItem?.name}?phone=${phone}`}
                                        className="text-blue-600"
                                    >
                                        {typeItem.name}
                                    </Link>
                                </td>
                            </tr>
                        ))
                    ) : (
                        <tr>
                            <td className="border p-2 text-center text-gray-500">Tidak ada type tersedia.</td>
                        </tr>
                    )}
                </tbody>
            </table>
            
            <h2 className="text-xl font-semibold mb-2">List Produk</h2>
            <table className="w-full border-collapse border border-gray-300">
                <thead>
                    <tr className="bg-gray-200">
                        <th className="border p-2">Nama Produk</th>
                        <th className="border p-2">Harga</th>
                        <th className="border p-2">Aksi</th>
                    </tr>
                </thead>
                <tbody>
                    {products.map((product) => (
                        <tr key={product.buyer_sku_code} className="border">
                            <td className="border p-2">{product.product_name}</td>
                            <td className="border p-2">Rp {new Intl.NumberFormat("id-ID").format(product.price)}</td>
                            <td className="border p-2">
                                <button 
                                    onClick={() => setSelectedProduct(product)}
                                    className="bg-blue-500 text-white px-4 py-2 rounded"
                                >
                                    Pilih
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
            {selectedProduct && (
                <form onSubmit={handleSubmit} className="mt-4">
                    <p className="mb-2">Produk yang dipilih: <strong>{selectedProduct.product_name}</strong></p>
                    <button 
                        type="submit"
                        className="bg-green-500 text-white px-4 py-2 rounded" 
                        disabled={loading}
                    >
                        {loading ? 'Memproses...' : 'Beli Sekarang'}
                    </button>
                </form>
            )}
        </div>
    );
}

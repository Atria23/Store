import React, { useState } from "react";
import { useForm } from "@inertiajs/react";

export default function ManageTypes({ types = [], brands = [], categories = [], inputTypes = [] }) {
    const [showModal, setShowModal] = useState(false);
    const [editType, setEditType] = useState(null);
    const [searchTerm, setSearchTerm] = useState("");
    const [sortOrder, setSortOrder] = useState("asc");
    const [showBrandPopup, setShowBrandPopup] = useState(false);
    const [showCategoryPopup, setShowCategoryPopup] = useState(false);
    const [showInputTypePopup, setShowInputTypePopup] = useState(false);
    const [selectedTypeId, setSelectedTypeId] = useState(null);
    const [isPopupOpen, setIsPopupOpen] = useState(false);
    const [errors, setErrors] = useState({});
    const [searchBrand, setSearchBrand] = useState("");
    const [searchCategory, setSearchCategory] = useState("");
    const [searchInputType, setSearchInputType] = useState("");

    const filteredTypes = types.filter(type =>
        type.name.toLowerCase().includes(searchTerm.toLowerCase())
    );

    const { data, setData, post, put, processing, reset, delete: destroy } = useForm({
        id: "",
        name: "",
        brand_id: "",
        category_id: "",
        input_type_id: "",
    });

    const handleSubmit = (e) => {
        e.preventDefault();
        setErrors({});

        const formData = new FormData();
        formData.append("name", data.name);
        formData.append("brand_id", data.brand_id);
        formData.append("category_id", data.category_id ?? "");
        formData.append("input_type_id", data.input_type_id ?? "");

        if (editType) {
            put(route("types.update", data.id), {
                data: formData,
                onSuccess: () => {
                    reset();
                    setEditType(null);
                    setShowModal(false);
                },
                onError: (err) => setErrors(err),
            });
        } else {
            // Jika tambah
            post(route("types.store"), {
                data: formData,
                onSuccess: () => {
                    reset();
                    setEditType(null);
                    setShowModal(false);
                },
                onError: (err) => setErrors(err),
            });
        }
    };


    // ðŸ”¹ Handle Edit
    const handleEdit = (type) => {
        setEditType(type);
        setData({
            id: type.id,
            name: type.name,
            brand_id: type.brand_id,
            category_id: type.category_id,
            input_type_id: type.input_type_id,
        });
        setShowModal(true);
    };

    // ðŸ”¹ Hapus Type
    const confirmDelete = (typeId) => {
        setSelectedTypeId(typeId);
        setIsPopupOpen(true);
    };

    const handleDelete = (id) => {
        setIsPopupOpen(false);
        destroy(route("types.destroy", id));
    };

    const sortedTypes = [...filteredTypes].sort((a, b) =>
        sortOrder === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)
    );

    return (
        <div className="p-4">
            {/* ðŸ”¹ Search & Add Button */}
            <div className="flex justify-between mb-4">
                <input
                    type="text"
                    placeholder="Cari Type..."
                    className="border p-2 rounded"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                />
                <button
                    className="bg-blue-500 text-white p-2 rounded"
                    onClick={() => setShowModal(true)}
                >
                    Tambah Type
                </button>
            </div>

            {/* ðŸ”¹ Table Type */}
            <table className="w-full border">
                <thead>
                    <tr className="bg-gray-200">
                        <th className="p-2 border">Nama</th>
                        <th className="p-2 border">Brand</th>
                        <th className="p-2 border">Kategori</th>
                        <th className="p-2 border">Input Type</th>
                        <th className="p-2 border">Aksi</th>
                    </tr>
                </thead>
                <tbody>
                    {sortedTypes.length > 0 ? (
                        sortedTypes.map((type) => (
                            <tr key={type.id} className="border">
                                <td className="p-2 border">{type.name}</td>
                                <td className="p-2 border">{type.brand_name || "-"}</td>
                                <td className="p-2 border">{type.category_name || "-"}</td>
                                <td className="p-2 border">{type.input_type_name || "-"}</td>
                                <td className="p-2 border">
                                    <div className="w-12 h-full flex flex-col items-center space-y-2">
                                        <button
                                            onClick={() => handleEdit(type)}
                                            className="w-full h-max px-2 py-[2px] text-xs text-main rounded-3xl bg-blue-50 border border-main flex items-center justify-center"
                                        >
                                            Edit
                                        </button>
                                        <button
                                            onClick={() => confirmDelete(type.id)}
                                            disabled={type.is_used}
                                            className={`w-full h-max px-2 py-[2px] text-xs rounded-3xl flex items-center justify-center ${type.is_used
                                                ? "text-gray-400 bg-gray-50 border border-gray-400 cursor-not-allowed"
                                                : "text-red-600 bg-red-50 border border-red-600"
                                                }`}
                                        >
                                            Hapus
                                        </button>


                                    </div>
                                </td>
                            </tr>
                        ))
                    ) : (
                        <tr>
                            <td colSpan="5" className="text-center p-4">Tidak ada data tersedia</td>
                        </tr>
                    )}
                </tbody>
            </table>
            {/* ðŸ”¹ Modal Tambah/Edit */}
            {showModal && (
                <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
                    <div className="bg-white p-5 rounded w-96">
                        <h2 className="text-lg font-bold">{editType ? "Edit Type" : "Tambah Type"}</h2>
                        <form onSubmit={handleSubmit}>
                            {/* ðŸ”¹ Input Nama Type */}
                            <input
                                type="text"
                                className="border p-2 w-full mt-2"
                                placeholder="Nama Type"
                                value={data.name}
                                onChange={(e) => setData("name", e.target.value)}
                            />

                            {/* ðŸ”¹ Select Kategori */}
                            <div className="relative mt-2">
                                <button
                                    type="button"
                                    className="border p-2 w-full text-left"
                                    onClick={() => setShowCategoryPopup(true)}
                                >
                                    {categories.find(c => c.id === data.category_id)?.name || "Pilih Kategori"}
                                </button>
                            </div>

                            {/* ðŸ”¹ Select Brand */}
                            <div className="relative mt-2">
                                <button
                                    type="button"
                                    className="border p-2 w-full text-left"
                                    onClick={() => setShowBrandPopup(true)}
                                >
                                    {brands.find(b => b.id === data.brand_id)?.name || "Pilih Brand"}
                                </button>
                            </div>

                            {/* ðŸ”¹ Select Input Type */}
                            <div className="relative mt-2">
                                <button
                                    type="button"
                                    className="border p-2 w-full text-left"
                                    onClick={() => setShowInputTypePopup(true)}
                                >
                                    {inputTypes.find(i => i.id === data.input_type_id)?.name || "Pilih Input Type"}
                                </button>
                            </div>

                            {errors.name && (
                                <p className="text-red-600 text-sm">{errors.name}</p>
                            )}

                            {/* ðŸ”¹ Tombol Simpan */}
                            <button type="submit" className="bg-blue-500 text-white p-2 rounded mt-4 w-full">
                                {editType ? "Update" : "Simpan"}
                            </button>
                        </form>
                    </div>
                </div>
            )}

            {/* ðŸ”¹ Popup Pilihan Kategori */}
            {showCategoryPopup && (
                <div className="fixed z-30 inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center">
                    <div className="w-[328px] h-max flex flex-col space-y-2 items-center justify-center p-4 rounded-lg bg-white">
                        <div className="w-full h-9 flex flex-row items-center pr-2 py-2 rounded-lg bg-neutral-100 border-2 border-gray-200">
                            <input
                                type="text"
                                className="bg-transparent border-none flex-grow focus:ring-0 focus:outline-none placeholder-gray-400"
                                placeholder="Cari Kategori..."
                                value={searchCategory}
                                onChange={(e) => setSearchCategory(e.target.value)}
                            />
                        </div>

                        <div className="w-full max-h-[342px] overflow-y-auto">
                            {categories
                                .filter(c => c.name.toLowerCase().includes(searchCategory.toLowerCase()))
                                .map(c => (
                                    <div
                                        key={c.id}
                                        className="flex items-center gap-2 w-full py-2 border-b border-gray-300 cursor-pointer hover:bg-gray-100 px-2"
                                        onClick={() => {
                                            setData("category_id", c.id);
                                            setShowCategoryPopup(false);
                                        }}
                                    >
                                        <img
                                            src={c.image ? `/storage/${c.image}` : "/storage/categories/default.png"}
                                            alt={c.name}
                                            className="w-8 h-8 border border-gray-300 rounded-full object-cover"
                                        />
                                        <p className="text-sm text-left">{c.name}</p>
                                    </div>
                                ))}
                        </div>

                        <button onClick={() => setShowCategoryPopup(false)} className="w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700 transition">
                            Tutup
                        </button>
                    </div>
                </div>
            )}

            {/* ðŸ”¹ Popup Pilihan Brand */}
            {showBrandPopup && (
                <div className="fixed z-30 inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center">
                    <div className="w-[328px] h-max flex flex-col space-y-2 items-center justify-center p-4 rounded-lg bg-white">
                        <div className="w-full h-9 flex flex-row items-center pr-2 py-2 rounded-lg bg-neutral-100 border-2 border-gray-200">
                            <input
                                type="text"
                                className="bg-transparent border-none flex-grow focus:ring-0 focus:outline-none placeholder-gray-400"
                                placeholder="Cari Brand..."
                                value={searchBrand}
                                onChange={(e) => setSearchBrand(e.target.value)}
                            />
                        </div>

                        <div className="w-full max-h-[342px] overflow-y-auto">
                            {brands
                                .filter(b => b.name.toLowerCase().includes(searchBrand.toLowerCase()))
                                .map(b => (
                                    <div
                                        key={b.id}
                                        className="flex items-center gap-2 w-full py-2 border-b border-gray-300 cursor-pointer hover:bg-gray-100 px-2"
                                        onClick={() => {
                                            setData("brand_id", b.id);
                                            setShowBrandPopup(false);
                                        }}
                                    >
                                        <img
                                            src={b.image ? `/storage/${b.image}` : "/storage/brands/default.webp"}
                                            alt={b.name}
                                            className="w-8 h-8 border border-gray-300 rounded-full object-cover"
                                        />
                                        <p className="text-sm text-left">{b.name}</p>
                                    </div>
                                ))}
                        </div>

                        <button onClick={() => setShowBrandPopup(false)} className="w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700 transition">
                            Tutup
                        </button>
                    </div>
                </div>
            )}


            {/* ðŸ”¹ Popup Pilihan Input Type */}
            {showInputTypePopup && (
                <div className="fixed z-30 inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center">
                    <div className="w-[328px] h-max flex flex-col space-y-2 items-center justify-center p-4 rounded-lg bg-white">
                        <div className="w-full h-9 flex flex-row items-center pr-2 py-2 rounded-lg bg-neutral-100 border-2 border-gray-200">
                            <input
                                type="text"
                                className="bg-transparent border-none flex-grow focus:ring-0 focus:outline-none placeholder-gray-400"
                                placeholder="Cari Input Type..."
                                value={searchInputType}
                                onChange={(e) => setSearchInputType(e.target.value)}
                            />
                        </div>

                        <div className="w-full max-h-[342px] overflow-y-auto">
                            {inputTypes
                                .filter(type => type.name.toLowerCase().includes(searchInputType.toLowerCase()))
                                .map(type => (
                                    <div
                                        key={type.id}
                                        className="w-full py-2 border-b border-gray-300 cursor-pointer hover:bg-gray-100"
                                        onClick={() => {
                                            setData("input_type_id", type.id);
                                            setShowInputTypePopup(false);
                                        }}
                                    >
                                        <p className="text-sm text-left">{type.name}</p>
                                    </div>
                                ))}
                        </div>

                        <button onClick={() => setShowInputTypePopup(false)} className="w-full bg-blue-600 text-white p-2 rounded hover:bg-blue-700 transition">
                            Tutup
                        </button>
                    </div>
                </div>
            )}


            {/* ðŸ”¹ Popup Konfirmasi Hapus */}
            {isPopupOpen && (
                <div className="fixed z-20 inset-0 bg-gray-800 bg-opacity-50 flex justify-center items-center">
                    <div className="w-[328px] h-max flex flex-col space-y-2 items-center justify-center p-4 rounded-lg bg-white">
                        <p className="w-full h-max text-utama text-lg font-medium text-center align-middle">
                            Yakin ingin menghapus tipe ini?
                        </p>
                        <div className="w-full h-max flex flex-row space-x-2">
                            <button
                                onClick={() => handleDelete(selectedTypeId)}
                                className="w-full h-10 flex items-center justify-center px-4 py-2 text-white bg-red-600 rounded-md hover:bg-red-700"
                            >
                                Ya
                            </button>
                            <button
                                onClick={() => setIsPopupOpen(false)}
                                className="w-full h-10 flex items-center justify-center px-4 py-2 text-white bg-main rounded-md hover:bg-blue-700"
                            >
                                Tidak
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}
